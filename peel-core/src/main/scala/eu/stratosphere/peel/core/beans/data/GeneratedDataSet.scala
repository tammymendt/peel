package eu.stratosphere.peel.core.beans.data

import eu.stratosphere.peel.core.beans.system.{FileSystem, Job, System}

/** Dataset that does not physically exist yet and is generated by a separate [[eu.stratosphere.peel.core.beans.system.Job  Job]].
  *
  * The data is generated and materialized by a separate [[eu.stratosphere.peel.core.beans.system.Job  Job]] which is responsible
  * for generating the data and materializing it at the specified location.
  *
  * If the data already exists at the specified location, it is '''not''' generated again!
  *
  * @param src A reference to the job that generates the dataset.
  * @param dst The path where the data is stored. The job has to make sure that the data is actually stored at that location.
  * @param fs Filesystem that is used to check if this dataset already exists.
  */
class GeneratedDataSet(val src: Job[System], val dst: String, fs: System with FileSystem) extends DataSet(dst, Set[System](fs)) {

  import scala.language.implicitConversions

  override def materialize() = {
    // resolve parameters from the current config in dst
    val dst = resolve(this.dst)

    if (!fs.exists(dst)) {
      logger.info(s"Generating data for target '$dst'")
      try {
        src.execute()
      } catch {
        case e: Throwable => throw new RuntimeException(s"Could not generate data for target '$dst' [$e]", e)
      }
    }
  }
}
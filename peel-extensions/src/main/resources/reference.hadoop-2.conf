system {
    hadoop-2 {
        user = ${system.default.user}
        group = ${system.default.group}
        path {
            # uncomment the following section if you want to extract an archive on every run
            # archive = {
            #     src = ${app.path.systems}"/hadoop-VERSION.tar.gz"
            #     dst = ${app.path.systems}
            # }
            home = ${app.path.systems}"/hadoop-2"
            config = ${system.hadoop-2.path.home}"/etc/hadoop"
            log = ${system.hadoop-2.path.home}"/logs"
            input = ${system.hadoop-2.config.core.fs.default.name}"/tmp/input"
            output = ${system.hadoop-2.config.core.fs.default.name}"/tmp/output"
        }
        format = true
        startup {
            max.attempts = ${system.default.startup.max.attempts}
            polling {
                counter = ${system.default.startup.polling.counter}
                interval = ${system.default.startup.polling.interval}
            }
        }
        config {
            # put list of masters
            masters = ${system.default.config.masters}
            # put list of slaves
            slaves = ${system.default.config.slaves}
            # hadoop-env.sh entries
            env {
                JAVA_HOME = ${system.default.config.java.home}
                HADOOP_OPTS= "-Djava.library.path="${system.hadoop-2.path.home}"/lib"
            }
            # core-site.xml entries
            core {
                fs.default.name = "hdfs://localhost:9000"
            }
            # hdfs-site.xml entries
            hdfs {
                dfs.replication = 1
                dfs.name.dir = "/tmp/hdfs/name"
                dfs.data.dir = "/tmp/hdfs/data"
            }
            # mapred-site.xml entries
            mapred {
                mapred.job.tracker._root_ = "localhost:9001"
                mapred.tasktracker.map.tasks.maximum = ${system.default.config.parallelism.per-node}
                mapred.tasktracker.reduce.tasks.maximum = ${system.default.config.parallelism.per-node}
            }
        }
    }
}